// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_THREAD_CALLBACKS
#define SILABS_THREAD_CALLBACKS


#include PLATFORM_HEADER
#include CONFIGURATION_HEADER
#include EMBER_AF_API_BUTTON_PRESS
#include EMBER_AF_API_CONNECTION_MANAGER_JIB
#include EMBER_AF_API_CONNECTION_MANAGER
#include EMBER_AF_API_STACK
#include EMBER_AF_API_ZCL_CORE
#include EMBER_AF_API_ZCL_OTA_BOOTLOAD_CORE
#include EMBER_AF_API_ZCL_OTA_BOOTLOAD_CLIENT
#include EMBER_AF_API_EMBER_TYPES
#include EMBER_AF_API_HAL
#include EMBER_AF_API_SIM_EEPROM


/** @brief Main Application Entry Point
 *
 * This is the main application entry point. All applications
 * must implement this function.
 */
int main(MAIN_FUNCTION_PARAMETERS);

/** @brief A callback called in interrupt context whenever a button
 * changes its state.
 *
 * @appusage Must be implemented by the application.  This function should
 * contain the functionality to be executed in response to changes of state
 * in each of the buttons, or callbacks to the appropriate functionality.
 *
 * @param button  The button which has changed state, either BUTTON0 or BUTTON1
 * as defined in the appropriate BOARD_HEADER.
 *
 * @param state   The new state of the button referenced by the button parameter,
 * either ::BUTTON_PRESSED if the button has been pressed or ::BUTTON_RELEASED if
 * the button has been released.
 */
void halButtonIsr(uint8_t button, uint8_t state);

/** @brief A callback called when a button is pressed. It is sometimes called
 * in ISR context.
 *
 * @appusage Must be implemented by the application.  This function should
 * contain the functionality to be executed in response to a button press, or
 * callbacks to the appropriate functionality.
 *
 * @param button  The button which was pressed, either BUTTON0 or BUTTON1
 * as defined in the appropriate BOARD_HEADER.
 *
 * @param press  Either EMBER_SINGLE_PRESS if it was a single press, or
 * EMBER_DOUBLE_PRESS if it was a double press.
 */
void emberButtonPressIsr(uint8_t button, EmberButtonPress press);

/** @brief Get the fixed joining key
 *
 * This function will be called whenever the in band commissioning fixed joining
 * key is needed by the connection manager.  The key will be set by this function
 * using the joinKey parameter, and the size will be relayed by the return value.
 * A return value of 0 indicates that the key has not been set, which will cause
 * the connection manager to halt its connection attempt.
 *
 * @param joinKey A pointer to the fixed joining key
 */
uint8_t emberConnectionManagerJibGetJoinKeyCallback(uint8_t **joinKey);

/** @brief Connection attempt completed.
 *
 * This function is called when an attempt to connect to a network has
 * completed.  It will convery the result of an attempt to join a network using
 * the emberConnectionManagerStartConnect function.  The status will be one of
 * the following values:
 *
 * EMBER_CONNECTION_MANAGER_STATUS_CONNECTED: The device succesfully attached to
 * the network.
 * EMBER_CONNECTION_MANAGER_STATUS_TIMED_OUT: The device was unable to join the
 * network after attempting the number of times specified in the connection
 * manager plugin options.
 */
void emberConnectionManagerConnectCompleteCallback(EmberConnectionManagerConnectionStatus status);

/**
 * @brief Handler called whenever the radio is powered on.
 */
void halRadioPowerUpHandler(void);

/**
 * @brief Handler called whenever the radio is powered off.
 */
void halRadioPowerDownHandler(void);

/** @brief Start Identifying
 *
 * This function is called when the device should start identifying.  The
 * device should continue to identify until
 * ::emberZclIdentifyServerStopIdentifyingCallback is called.
 */
void emberZclIdentifyServerStartIdentifyingCallback(EmberZclEndpointId_t endpointId,
                                                    uint16_t identifyTimeS);

/** @brief Stop Identifying
 *
 * This function is called when the device should stop identifying.
 */
void emberZclIdentifyServerStopIdentifyingCallback(EmberZclEndpointId_t endpointId);

/** @brief Mark Application Buffers
 *
 * This function is called when the application must mark its buffers.  Buffers
 * that are not marked will be reclaimed by the stack.
 */
void emberAfMarkApplicationBuffersCallback(void);

/** @brief Network Status
 *
 * This function is called when the network status changes.
 */
void emberAfNetworkStatusCallback(EmberNetworkStatus newNetworkStatus,
                                  EmberNetworkStatus oldNetworkStatus,
                                  EmberJoinFailureReason reason);

/** @brief Main
 *
 * This function is called immediately after the application starts executing
 * and can be used to perform initialization that should occur before any other
 * components are initialized.
 */
void emberAfMainCallback(MAIN_FUNCTION_PARAMETERS);

/** @brief Init
 *
 * This function is called after the stack initializes and can be used to
 * perform any additional initialization required at stack startup.  On SoCs,
 * this will generally be called only once: at system startup.  On hosts, this
 * will be called when the NCP initializes, and may be called multiple times
 * during the lifetime of the host application.
 */
void emberAfInitCallback(void);

/** @brief Tick
 *
 * This function is called in each iteration of the main application loop and
 * can be used to perform periodic functions.  The frequency with which this
 * function is called depends on how quickly the main loop runs.  If the
 * application blocks at any time during the main loop, this function will not
 * be called until execution resumes.  On SoC platforms, sleeping and idling
 * will block.  On Unix hosts, process yielding (e.g., via select) will block.
 */
void emberAfTickCallback(void);

/**************************************************************************//**
 * This function attempts to set the cluster attribute values to those in the
 * policy parameters. The attributes affected are 'OTA Current File Version',
 * 'Manufacturer ID', and 'Image Type ID'.
 *
 * @return `true` if there was an error setting one of the attributes
 *
 *****************************************************************************/
bool emberZclOtaBootloadClientSetVersionInfoCallback();

/**************************************************************************//**
 * Check to see if a static IP address should be used for the OTA server
 *
 * @param serverInfo Structure to store the OTA server parameters
 * @return `true` if the device should use a static address for the OTA Server
 *
 * @note If `true` is returned, the OTA Client state machine will move to the
 *       next state, which is querying the OTA Server device for a new OTA
 *       file to download. If `false` is returned, the OTA Client will continue
 *       to try to discover an OTA Server.
 *****************************************************************************/
bool emberZclOtaBootloadClientServerHasStaticAddressCallback(EmberZclOtaBootloadClientServerInfo_t *serverInfo);

/**************************************************************************//**
 * Start a DNS hostname resolution
 *
 * @param serverInfo Updated to the default server parameters
 * @return `true` if the device should use the DNS hostname for the OTA Server
 *
 * @note If `true` is returned, the OTA Client state machine will wait for the
 *       DNS hostname to be resolved.
 *****************************************************************************/
bool emberZclOtaBootloadClientServerHasDnsNameCallback(EmberZclOtaBootloadClientServerInfo_t *serverInfo);

/**************************************************************************//**
 * Initiate a server discovery
 *
 * @param clusterSpec server specifications
 * @param responseHandler function to handle the response to the CoAP message
 * @return `true` if the specification is valid and the request has been sent
 *
 * @note If `true` is returned, the OTA Client state machine will wait until the responseHandler is called
 *****************************************************************************/
bool emberZclOtaBootloadClientServerHasDiscByClusterId(const EmberZclClusterSpec_t *clusterSpec, EmberCoapResponseHandler responseHandler);

/**************************************************************************//**
 * A potential OTA Server has been discovered.
 *
 * @param serverInfo Information about the discovered OTA Server device.
 * @return `true` if the device should be chosen as the OTA Server, `false`
 *         otherwise.
 *
 * @note If `true` is returned, the OTA Client state machine will move to the
 *       next state, which is querying the OTA Server device for a new OTA
 *       file to download. If `false` is returned, the OTA Client will continue
 *       to try to discover an OTA Server.
 *****************************************************************************/
bool emberZclOtaBootloadClientServerDiscoveredCallback(const EmberZclOtaBootloadClientServerInfo_t *serverInfo);

/**************************************************************************//**
 * Get the parameters for a QueryNextImage command.
 *
 * @param fileSpec The OTA file specification to include in the query.
 * @param hardwareVersion The current hardware version of the device, or
 *                        ::EMBER_ZCL_OTA_BOOTLOAD_HARDWARE_VERSION_NULL if this
 *                        information is to be ignored.
 * @return `true` if the device should continue to send a QueryNextImage
 *         command, or `false` if it should reschedule the command for a later
 *         time.
 *****************************************************************************/
bool emberZclOtaBootloadClientGetQueryNextImageParametersCallback(EmberZclOtaBootloadFileSpec_t *fileSpec,
                                                                  EmberZclOtaBootloadHardwareVersion_t *hardwareVersion);

/**************************************************************************//**
 * A download of an OTA file can be started.
 *
 * @param fileSpec The specification for the OTA file to potentially
 *                 be downloaded.
 * @param existingFile A file with this same specification currently exists in
 *                     OTA storage.
 * @return `true` if the device should kick off the download process for this
 *         file, or `false` if it should continue to query for new images.
 *
 * @sa emberZclOtaBootloadStorageFind
 *****************************************************************************/
bool emberZclOtaBootloadClientStartDownloadCallback(const EmberZclOtaBootloadFileSpec_t *fileSpec,
                                                    bool existingFile);

/**************************************************************************//**
 * An OTA file has been downloaded and verified, or failed to do one of the two.
 *
 * @param fileSpec The specification for the OTA file in question.
 * @param status The status of file download and verification.
 * @return A status based on the application's analysis of the downloaded file.
 *         This is an opportunity for the application to verify the downloaded
 *         image and return a related status.
 *
 * @sa emberZclOtaBootloadStorageFind
 *****************************************************************************/
EmberZclStatus_t emberZclOtaBootloadClientDownloadCompleteCallback(const EmberZclOtaBootloadFileSpec_t *fileSpec,
                                                                   EmberZclStatus_t status);

/**************************************************************************//**
 * An OTA file is about to be installed.
 *
 * @param fileSpec The specification for the OTA file that will be installed.
 *
 * @sa emberZclOtaBootloadStorageFind
 *****************************************************************************/
void emberZclOtaBootloadClientPreBootloadCallback(const EmberZclOtaBootloadFileSpec_t *fileSpec);

/** @brief The Simulated EEPROM callback function, implemented by the
 * application.
 *
 * @param status  An ::EmberStatus error code indicating one of the conditions
 * described below.
 *
 * This callback will report an EmberStatus of
 * ::EMBER_SIM_EEPROM_ERASE_PAGE_GREEN whenever a token is set and a page needs
 * to be erased.  If the main application loop does not periodically
 * call halSimEepromErasePage(), it is best to then erase a page in
 * response to ::EMBER_SIM_EEPROM_ERASE_PAGE_GREEN.
 *
 * This callback will report an EmberStatus of ::EMBER_SIM_EEPROM_ERASE_PAGE_RED
 * when the pages <i>must</i> be erased to prevent data loss.
 * halSimEepromErasePage() needs to be called until it returns 0 to indicate
 * there are no more pages that need to be erased.  Ignoring
 * this indication and not erasing the pages will cause dropping the new data
 * trying to be written.
 *
 * This callback will report an EmberStatus of ::EMBER_SIM_EEPROM_FULL when
 * the new data cannot be written due to unerased pages.  <b>Not erasing
 * pages regularly, not erasing in response to
 * ::EMBER_SIM_EEPROM_ERASE_PAGE_GREEN, or not erasing in response to
 * ::EMBER_SIM_EEPROM_ERASE_PAGE_RED will cause
 * ::EMBER_SIM_EEPROM_FULL and the new data will be lost!.</b>  Any future
 * write attempts will be lost as well.
 *
 * This callback will report an EmberStatus of ::EMBER_SIM_EEPROM_REPAIRING
 * when the Simulated EEPROM needs to repair itself.  While there's nothing
 * for an app to do when the SimEE is going to repair itself (SimEE has to
 * be fully functional for the rest of the system to work), alert the
 * application to the fact that repairing is occuring.  There are debugging
 * scenarios where an app might want to know that repairing is happening;
 * such as monitoring frequency.
 * @note  Common situations will trigger an expected repair, such as using
 *        a new chip or changing token definitions.
 *
 * If the callback ever reports the status ::EMBER_ERR_FLASH_WRITE_INHIBITED or
 * ::EMBER_ERR_FLASH_VERIFY_FAILED, this indicates a catastrophic failure in
 * flash writing, meaning either the address being written is not empty or the
 * write itself has failed.  If ::EMBER_ERR_FLASH_WRITE_INHIBITED is
 * encountered, the function ::halInternalSimEeRepair(false) should be called
 * and the chip should then be reset to allow proper initialization to recover.
 * If ::EMBER_ERR_FLASH_VERIFY_FAILED is encountered the Simulated EEPROM (and
 * tokens) on the specific chip with this error should not be trusted anymore.
 *
 */
void halSimEepromCallback(EmberStatus status);

/** @brief This function can be used to hook an external memory allocator into
 * the stack. It will be called when we need to allocate large packets.
 *
 * If a value other than NULL is returned that pointer will be used to store
 * packet data. You must also fill in the objectRef parameter with whatever
 * reference you would like passed to the emberFreeMemoryForPacketHandler()
 * when we're done with this memory. If you set the objectRef to NULL then
 * the free handler will not be called.
 *
 * @param size       size of packet data
 * @param objectRef  Reference of the memory to be used in
 *                   emberFreeMemoryForPacketHandler
 *
 * @return pointer that stores the packet data
 */
void *emberAllocateMemoryForPacketHandler(uint32_t size, void **objectRef);

/** @brief This handler is called when freeing memory allocated with
 * ::emberAllocateMemoryForPacketHandler
 *
 * @param objectRef Reference used in ::emberAllocateMemoryForPacketHandler
 */
void emberFreeMemoryForPacketHandler(void *objectRef);

/** @brief Applications that use buffers must mark them by defining
 * this function.  The stack uses this when reclaiming unused buffers.
 */
void emberMarkApplicationBuffersHandler(void);

/**
 * @brief Application callback for emberSendDiagnosticQuery().
 *
 * @param status The return status.
 * @param remoteAddress   The remote address that sent the answer.
 * @param payload The raw payload.
 * @param payloadLength payload's length.
 */
void emberDiagnosticAnswerHandler(EmberStatus status,
                                  const EmberIpv6Address *remoteAddress,
                                  const uint8_t *payload,
                                  uint8_t payloadLength);

/** @brief Callback for incoming requests.
 *
 * For more information, see stack/include/coap.h
 *
 * `info` can be passed as-is when sending an immediate response from within
 * the call to `emberCoapRequestHandler()`.  To send a delayed response, the
 * `info` data must be copied to a more permanent
 * location using `emberSaveRequestInfo()`.
 */
void emberCoapRequestHandler(EmberCoapCode code,
                             uint8_t *uri,
                             EmberCoapReadOptions *options,
                             const uint8_t *payload,
                             uint16_t payloadLength,
                             const EmberCoapRequestInfo *info);

/** @brief  Application callback for an incoming ICMP message.
 *
 * @param ipHeader        Pointer to an IPV6 buffer
 */
void emberIncomingIcmpHandler(Ipv6Header *ipHeader);

/** @brief  Reports an incoming beacon during an active scan. */
void emberActiveScanHandler(const EmberMacBeaconData *beaconData);

/** @brief
 * This is called when a new address is configured on the application.
 *
 * If addressFlags is EMBER_LOCAL_ADDRESS, it means that the address configured
 * is a Thread-local address.
 *
 * Otherwise, it means that the address assigned is a global address (DHCP or
 * SLAAC).
 *
 * In either case, if the valid lifetime is zero, then the address is no
 * longer available.
 *
 * @param address            the address
 * @param preferredLifetime  the preferred lifetime of the address (in seconds)
 * @param validLifetime      the valid lifetime of the address (in seconds)
 * @param addressFlags       address configuration flags (see LocalServerFlag_e)
 */
void emberAddressConfigurationChangeHandler(const EmberIpv6Address *address,
                                            uint32_t preferredLifetime,
                                            uint32_t validLifetime,
                                            uint8_t addressFlags);

/** @brief A callback that indicates whether the attach process was
 * successfully initiated via a prior call to ::emberAttachToNetwork().
 * The status argument is either EMBER_SUCCESS, or EMBER_INVALID_CALL
 * if attach was called when the network status was not
 * EMBER_JOINED_NETWORK_NO_PARENT, or while an attach was underway.
 */
void emberAttachToNetworkReturn(EmberStatus status);

/** @brief Return call for emberBecomeCommissioner().  The status is
 * EMBER_SUCCESS if a petition was sent or EMBER_ERR_FATAL if some
 * temporary resource shortage prevented doing so.
 */
void emberBecomeCommissionerReturn(EmberStatus status);

/** @brief Provides the result of a call to emberChangeNodeType():
 * either EMBER_SUCCESS, or EMBER_INVALID_CALL.
 */
void emberChangeNodeTypeReturn(EmberStatus status);

/** @brief Provides the result of a call to emberAllowNativeCommissioner():
 * either EMBER_SUCCESS or EMBER_INVALID_CALL.
 */
void emberAllowNativeCommissionerReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSetCommissionerKey():
 * either EMBER_SUCCESS or EMBER_INVALID_CALL.
 */
void emberSetCommissionerKeyReturn(EmberStatus status);

/** @brief Handler to let application know that a PSKc TLV was successfully set.
 *
 * @param pskc                   PSKc: 16 bytes in length
 */
void emberSetPskcHandler(const uint8_t *pskc);

/** @brief Provides the result of a call to emberSetJoinKey():
 * either EMBER_SUCCESS or EMBER_BAD_ARGUMENT.
 */
void emberSetJoinKeyReturn(EmberStatus status);

/**
 * @brief Provides the result of a call to emberCommissionNetwork.
 *
 * Returns EMBER_SUCCESS if successful
 *         EMBER_BAD_ARGUMENT if any of the options are wrong
 *         EMBER_INVALID_CALL if the node is already on a network
 *
 * @param status Whether the call to emberCommissionNetwork was successful
 */
void emberCommissionNetworkReturn(EmberStatus status);

/** @brief Reports on the current commissioner state.
 *
 * @param flags    A combination of zero or more of the following:
 * - EMBER_HAVE_COMMISSIONER           a commissioner is active in the network
 * - EMBER_AM_COMMISSIONER             this device is the active commissioner
 *                                     if emberStopCommissioning is called, then
 *                                     this flag is not returned as we are open
 *                                     to commissioner petitions
 * - EMBER_JOINING_ENABLED             joining is enabled
 * - EMBER_JOINING_WITH_EUI_STEERING   steering data restricts which devices can
 *                                     join.  if not set, no restriction, any
 *                                     device can join (significant only when
 *                                     EMBER_JOINING_ENABLED is set)
 *
 * @param commissionerName    The name of the active commissioner, or
 *                            NULL if there is none or the name is not
 *                            known.
 *
 * @param commissionerNameLength    The length of commissonerName.
 */
void emberCommissionerStatusHandler(uint16_t flags,
                                    const uint8_t *commissionerName,
                                    uint8_t commissionerNameLength);

/** @brief Provides the result of a call to ::emberConfigureGateway */
void emberConfigureGatewayReturn(EmberStatus status);

/** @brief Provides the result of a call to ::emberSetNdData */
void emberSetNdDataReturn(EmberStatus status, uint16_t length);

/** @brief Provides the result of a call to ::emberSetLocalNetworkData */
void emberSetLocalNetworkDataReturn(EmberStatus status, uint16_t length);

/** @brief Provides the result of a call to ::emberConfigureExternalRoute */
void emberConfigureExternalRouteReturn(EmberStatus status);

/** @brief A callback invoked to inform the application of the
 * occurrence of an event defined by EmberCounterType, for example,
 * transmissions and receptions at different layers of the stack.
 *
 * The application must define EMBER_APPLICATION_HAS_COUNTER_HANDLER
 * in its CONFIGURATION_HEADER to use this.
 * This function may be called in ISR context, so processing should
 * be kept to a minimum.
 *
 * @param type       The type of the event.
 * @param increment  Specify the increase in the counter's tally.
 *
 */
void emberCounterHandler(EmberCounterType type, uint16_t increment);

/** @brief A callback invoked to query the application for the
 * countervalue of an event defined by EmberCounterType.
 *
 * The application must define EMBER_APPLICATION_HAS_COUNTER_VALUE_HANDLER
 * in its CONFIGURATION_HEADER to use this.
 *
 * @param   type       The type of the event.
 * @returns The counter's tally.
 *
 */
uint16_t emberCounterValueHandler(EmberCounterType type);

/** @brief NCP handler called to process a custom message from the Host.
 *
 * @param message message received
 * @param messageLength length of message
 */
void emberCustomHostToNcpMessageHandler(const uint8_t *message,
                                        uint8_t messageLength);

/** @brief Host handler called to process a custom message from the NCP.
 *
 * @param message message received
 * @param messageLength length of message
 */
void emberCustomNcpToHostMessageHandler(const uint8_t *message,
                                        uint8_t messageLength);

/** @brief For a sleepy end device, report how long the chip went to deep sleep.
 * In a NCP + host setup, the stack reports this to the host app.
 */
void emberDeepSleepCompleteHandler(uint16_t sleepDuration);

/** @brief Provides the result of a call to emberDeepSleep(). */
void emberDeepSleepReturn(EmberStatus status);

/** @brief
 * This is called when the stack knows about a new dhcp server or if
 * a dhcp server has become unavailable.
 *
 * "available" means the DHCP server can offer us an address if
 * requested.
 *
 * @param prefix                  dhcp server prefix
 * @param prefixLengthInBits      length in bits of the prefix
 * @param available               whether this dhcp server is available
 */
void emberDhcpServerChangeHandler(const uint8_t *prefix,
                                  uint8_t prefixLengthInBits,
                                  bool available);

/** @brief  Reports the maximum RSSI value measured on the channel.
 *
 * @param channel  The 802.15.4 channel on which the RSSI value was measured.
 *
 * @param maxRssiValue  The maximum RSSI value measured (in units of dBm).
 */
void emberEnergyScanHandler(uint8_t channel, int8_t maxRssiValue);

/** @brief This method is called any time an event is scheduled from within an
 * ISR context. It can be used to determine when to stop a long running sleep
 * to see what application or stack events now need to be processed.
 * @param event The event that was scheduled by the ISR.
 */
void emberEventDelayUpdatedFromIsrHandler(Event *event);

/** @brief
 * This is called when the stack knows about a border router that has
 * an external route to a prefix.
 *
 * @param prefix                  external route prefix
 * @param prefixLengthInBits      length in bits of the prefix
 * @param available               whether this external route is available.
 */
void emberExternalRouteChangeHandler(const uint8_t *prefix,
                                     uint8_t prefixLengthInBits,
                                     bool available);

/** @brief A callback that indicates whether a prior call to
 * ::emberFormNetwork() successfully initiated the form process.
 * The status argument is either EMBER_SUCCSS, or EMBER_INVALID_CALL
 * if resume was called when the network status was not EMBER_NO_NETWORK,
 * or a scan was underway.
 */
void emberFormNetworkReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberGetAntennaMode.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 * @param mode the current antenna mode, 0-primary,
 *             1-secondary, 2-toggle on tx ack fail
 */
void emberGetAntennaModeReturn(EmberStatus status,
                               uint8_t mode);

/** @brief Provides the result of a call to emberGetCcaThreshold(). */
void emberGetCcaThresholdReturn(int8_t threshold);

/** @brief
 * Gets the token information for tokenId = EMBER_CHANNEL_CAL_DATA_TOKEN
 *
 * @param lna          [msb: cal needed? | bit 0-5: lna tune value]
 * @param tempAtLna    [the temp (degC) when the LNA was calibrated]
 * #param modDac       [msb: cal needed? | bit 0-5: modulation DAC tune value]
 * @param tempAtModDac [the temp (degC) when the mod DAC was calibrated]
 */
void emberGetChannelCalDataTokenReturn(uint8_t lna,
                                       int8_t tempAtLna,
                                       uint8_t modDac,
                                       int8_t tempAtModDac);

/** @brief Provides the result of a call to emberGetCounter(). */
void emberGetCounterReturn(EmberCounterType type, uint16_t value);

/** @brief
 * Provides the result of a call to ::emberGetCtune.
 *
 * @param tune   The current CTUNE value.
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 */
void emberGetCtuneReturn(uint16_t tune,
                         EmberStatus status);

/** @brief Provides the result of a call to ::emberGetGlobalAddresses
 *
 * @param address             IPv6 global address
 * @param preferredLifetime   Preferred lifetime (in seconds)
 * @param validLifetime       Valid lifetime (in seconds)
 * @param addressFlags        Address configuration flags (EMBER_GLOBAL_ADDRESS_*)
 */
void emberGetGlobalAddressReturn(const EmberIpv6Address *address,
                                 uint32_t preferredLifetime,
                                 uint32_t validLifetime,
                                 uint8_t addressFlags);

/** @brief Provides the result of a call to ::emberGetGlobalPrefix
 *
 * @param flags               Please ignore this param, it is currently unused.
 *                            (returns 0)
 * @param isStable            Stable or temporary prefix
 * @param prefix              Border router prefix
 * @param prefixLengthInBits  Prefix length in bits
 * @param domainId            Provisioning domain ID
 * @param preferredLifetime   Preferred lifetime (in seconds)
 * @param validLifetime       Valid lifetime (in seconds)
 */
void emberGetGlobalPrefixReturn(uint8_t flags,
                                bool isStable,
                                const uint8_t *prefix,
                                uint8_t prefixLengthInBits,
                                uint8_t domainId,
                                uint32_t preferredLifetime,
                                uint32_t validLifetime);

/** @brief
 * Provides the result of a call to ::emberGetMfgToken.
 *
 * @param tokenId         Which manufacturing token read.
 * @param status          An EmberStatus value indicating success or the
 * @param tokenData       The manufacturing token data.
 * @param tokenDataLength The length of the <i>tokenData</i> parameter in
 *                        bytes.
 */
void emberGetMfgTokenReturn(EmberMfgTokenId tokenId,
                            EmberStatus status,
                            const uint8_t *tokenData,
                            uint8_t tokenDataLength);

/** @brief
 * Provides the result of a call to ::emberGetNetworkData.
 *
 * The status value is one of:
 *  - EMBER_SUCCESS
 *  - EMBER_NETWORK_DOWN
 *  - EMBER_BAD_ARGUMENT (the supplied buffer was too small)
 *
 * @param status
 * @param networkData             location of the Network Data
 * @param dataLength              length in bytes of the Network Data
 */
void emberGetNetworkDataReturn(EmberStatus status,
                               uint8_t *networkData,
                               uint16_t bufferLength);

/** @brief Provides the result of a call to emberGetNetworkDataTlv().
 *
 * @param type the type of TLV returned. This is the same value as
 * the value specified in the emberGetNetworkDataTlv() call.
 * @param index the instance number of the TLV. This is the same value as
 * the value specified in the emberGetNetworkDataTlv() call.
 * @param versionNumber the network data version
 * @param tlv the TLV corresponding to type or NULL.
 * @param tlvLength length of tlv
 */
void emberGetNetworkDataTlvReturn(uint8_t typeByte,
                                  uint8_t index,
                                  uint8_t versionNumber,
                                  const uint8_t *tlv,
                                  uint8_t tlvLength);

/** @brief
 * Provides the result of a call to ::emberGetPtaEnable.
 *
 * @param enabled When true, indicates packet traffic arbitration
 * is enabed. When false, indicates packet traffic arbitration is
 * disabled.
 */
void emberGetPtaEnableReturn(bool enabled);

/** @brief
 * Provides the result of a call to ::emberGetPtaOptions.
 *
 * @param indicates packet traffic arbitration options
 * bit field.
 * Field                              Bit Position      Size(bits)
 * RX retry timeout ms                0                 8
 * Enable ack radio holdoff           8                 1
 * Abort mid TX if grant is lost      9                 1
 * TX request is high priority        10                1
 * RX request is high prioirity       11                1
 * RX retry request is high priority  12                1
 * RX retry request is enabled        13                1
 * Radio holdoff is enabled           14                1
 * Toggle request on mac retransmit   15                1
 * Reserved                           16                15
 * Hold request across CCA failures   31                1
 */
void emberGetPtaOptionsReturn(uint32_t options);

/** @brief Provides the result of a call to emberGetRadioPower() on the host. */
void emberGetRadioPowerReturn(int8_t power);

/** @brief Provides the result of a call to emberGetRipEntry(). */
void emberGetRipEntryReturn(uint8_t index, const EmberRipEntry *entry);

/** @brief Provides the result of a call to ::emberGetRoutingLocator
 *
 * @param rloc The Routing Locator as a full IPv6 address.
 */
void emberGetRoutingLocatorReturn(const EmberIpv6Address *rloc);

/** @brief
 * Provides the result of a call to ::emberGetStandaloneBootloaderInfo.
 *
 * @param version    BOOTLOADER_INVALID_VERSION if the standalone
 *                   bootloader is not present, or the version of
 *                   the installed standalone bootloader.
 * @param platformId The value of PLAT on the node.
 * @param microId    The value of MICRO on the node.
 * @param phyId      The value of PHY on the node.
 */
void emberGetStandaloneBootloaderInfoReturn(uint16_t version,
                                            uint8_t platformId,
                                            uint8_t microId,
                                            uint8_t phyId);

/** @brief Provides the result of a call to emberGetTxPowerMode() on the host.
 * @return the current tx power mode.
 */
void emberGetTxPowerModeReturn(uint16_t txPowerMode);

/** @brief Provides the result of a call to emberGetVersions(). */
void emberGetVersionsReturn(const uint8_t *versionName,
                            uint16_t managementVersionNumber,
                            uint16_t stackVersionNumber,
                            uint16_t stackBuildNumber,
                            EmberVersionType versionType,
                            const uint8_t *buildTimestamp);

/**
 * @brief In a host/NCP setup, notifies the host to changes in the network parameters.
 *
 * @param parameters Current network parameters
 * @param localEui64 The EUI64 of the Ember chip
 * @param macExtendedId The extended MAC ID of the Ember chip
 * @param networkStatus The current status of the network
 */
void emberHostStateHandler(const EmberNetworkParameters *parameters,
                           const EmberEui64 *localEui64,
                           const EmberEui64 *macExtendedId,
                           EmberNetworkStatus networkStatus);

/** @brief  Provides the result of a call to emberInit(). */
void emberInitReturn(EmberStatus status);

/** @brief  A callback that indicates whether the join process was successfully
 * initiated via a prior call to ::emberJoinNetwork() or
 * ::emberJoinCommissioned().  The possible EmberStatus values are:
 * EMBER_SUCCESS, EMBER_BAD_ARGUMENT, or EMBER_INVALID_CALL (if join was called
 * when the network status was something other than EMBER_NO_NETWORK).
 */
void emberJoinNetworkReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberLaunchStandaloneBootloader.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 */
void emberLaunchStandaloneBootloaderReturn(EmberStatus status);

/** @brief A callback invoked when the leader data changes.
 *
 * @param leaderData the leader data
 */
void emberLeaderDataHandler(const uint8_t *leaderData);

/** @brief Application handler to define "passthrough" packets.
 *
 * @note This API is for SoCs only.
 * @note The application must define
 *       EMBER_APPLICATION_HAS_MAC_PASSTHROUGH_FILTER_HANDLER
 *
 * @param macHeader A pointer to the initial portion of the incoming MAC
 *                  header, in the standard 802.15.4 format.  The first
 *                  two bytes comprise the frame control, which dictates
 *                  source / destination PAN and addressing formats.
 *                  (See the MAC sublayer definition in the standards
 *                   definition 802.15.4e/2012)
 *
 *                  The relevant bytes of the header are:
 *  ----------------------------------------------------------------------
 *  | octets: |  2  |  1  |  0/2    |   0/2/8   |   0/2   |   0/2/8  | 
 *  ----------------------------------------------------------------------
 *  |         | ctl | seq | dst.pan |  dst.addr | src.pan | src.addr | ...
 *  ----------------------------------------------------------------------
 *                  Note that subsequent MAC fields, and the MAC payload,
 *                  may not yet be present at this point.
 *
 * @return true if the message is an application MAC passthrough message.
 */
bool emberMacPassthroughFilterHandler(uint8_t *macHeader);

/** @brief Application handler to intercept "passthrough" packets and
 * handle them at the application.
 *
 * @note This API is for SoCs only.
 * @note The application must define
 *       EMBER_APPLICATION_HAS_MAC_PASSTHROUGH_MESSAGE_HANDLER
 *
 * @param header The message buffer pointing to the full 802.15.4 frame
 *               to be handled by the application.
 */
void emberMacPassthroughMessageHandler(PacketHeader header);

/** @brief Application handler to filter 802.15.4 packets to be observed
 * for signal strength.
 *
 * @note This API is for SoCs only.
 * @note The application must define
 *       EMBER_APPLICATION_HAS_RSSI_FILTER_HANDLER
 *
 * @param macHeader A pointer to the initial portion of the incoming MAC
 *                  header, in the standard 802.15.4 format.  The first
 *                  two bytes comprise the frame control, which dictates
 *                  source / destination PAN and addressing formats.
 *                  (See the MAC sublayer definition in the standards
 *                   definition 802.15.4e/2012)
 *
 *                  The relevant bytes of the header are:
 *  ----------------------------------------------------------------------
 *  | octets: |  2  |  1  |  0/2    |   0/2/8   |   0/2   |   0/2/8  | 
 *  ----------------------------------------------------------------------
 *  |         | ctl | seq | dst.pan |  dst.addr | src.pan | src.addr | ...
 *  ----------------------------------------------------------------------
 *                  Note that subsequent MAC fields, and the MAC payload,
 *                  may not yet be present at this point.
 *
 * @return true if the application wants to peek at the RSSI for this message.
 */
bool emberMacRssiFilterHandler(uint8_t *macHeader);

/** @brief Gets the received signal strength indication (RSSI) for the
 * last 802.15.4 packet received by the stack.
 *
 * @note This is called on the application for all packets that match
 * the rule defined in ::emberMacRssiFilterHandler()
 *
 * The quantity referenced by currentRssi will contain the energy level
 * (in units of dBm) observed during the last 802.15.4 packet received
 * in that handler.
 *
 * @note This API is for SoCs only.
 * @note The application must define
 *       EMBER_APPLICATION_HAS_RSSI_FILTER_HANDLER
 *
 * @note This functionality is not available for packets such as 802.15.4
 * data requests or acknowledgements.  Data requests must be handled quickly
 * due to strict 15.4 timing requirements, and so the RSSI information is not
 * recorded.  Similarly, 802.15.4 ACKs are handled by the hardware and the
 * information does not make it up to the stack.
 *
 * @param currentRssi  The RSSI for the last incoming message processed.
 */
void emberMacRssiHandler(int8_t currentRssi);

/** @brief
 * This is called when the stack receives new Thread Network Data.
 *
 * @param networkData             the Network Data
 * @param length                  length in bytes of the Network Data
 */
void emberNetworkDataChangeHandler(const uint8_t *networkData, uint16_t length);

/** @brief  Reports a change to the network status.  For example, the network
 * status changes while going through the joining process, or while reattaching
 * to the network, which can happen for a variety of reasons.  In particular,
 * after issuing a form, join, resume, or attach command, the application
 * knows that the device is on the network and ready to communicate when
 * this handler is called with a newNetworkStatus of
 * EMBER_JOINED_NETWORK_ATTACHED.
 *
 * If the status handler is reporting a join failure, then the newNetworkStatus
 * argument will have a value of EMBER_NO_NETWORK and the reason argument
 * will contain an appropriate value.  For other network status reports, the
 * reason argument does not apply and is set to EMBER_JOIN_FAILURE_REASON_NONE.
 */
void emberNetworkStatusHandler(EmberNetworkStatus newNetworkStatus,
                               EmberNetworkStatus oldNetworkStatus,
                               EmberJoinFailureReason reason);

/** @brief  If implementing event-driven sleep on an NCP host, this method will
 * return the bitmask indicating the stack's current tasks. (see enum above)
 *
 *  The mask ::EMBER_HIGH_PRIORITY_TASKS defines which tasks are high
 *  priority.  Devices should not sleep if any high priority tasks are active.
 *  Active tasks that are not high priority are waiting for
 *  messages to arrive from other devices.  If there are active tasks,
 *  but no high priority ones, the device may sleep but should periodically
 *  wake up and call ::emberPollForData() in order to receive messages.  Parents
 *  will hold messages for ::EMBER_INDIRECT_TRANSMISSION_TIMEOUT (in quarter
 *  seconds) before discarding them.
 *
 * @return A bitmask of the stack's active tasks.
 */
void emberOkToNapReturn(uint8_t stateMask);

/** @brief Provides the result of a call to emberPollForData().
 * @param An EmberStatus value:
 * - ::EMBER_SUCCESS      - The poll message has been submitted for transmission
 * - ::EMBER_INVALID_CALL - The node is not a sleepy end device.
 * - ::EMBER_NOT_JOINED   - The node is not part of a network.
 */
void emberPollForDataReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberRadioGetRandomNumbers.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure. When EMBER_SUCCESS is returned
 *               ::rn and ::count will contain valid data.  ::rn
                 and ::count are undefined when EMBER_SUCCESS is not
 *               returned.
 * @param rn the uint16_t random values
 * @param count - the count of uint16_t values located at ::rn
 */
void emberRadioGetRandomNumbersReturn(EmberStatus status,
                                      const uint16_t *rn,
                                      uint8_t count);

/** @brief
 * Provides the result of a call to ::emberRequestDhcpAddress
 *
 * This call only indicates the status of the request (EMBER_ERR_FATAL if no
 * DHCP server is found, and EMBER_SUCCESS otherwise).  The assigned IPv6
 * address is returned via ::emberAddressConfigurationChangeHandler
 *
 * @param status                  Status of DHCP Address Request
 * @param prefix                  Prefix requested in ::emberRequestDhcpAddress
 * @param prefixLengthInBits      Prefix length in bits requested in
 *                                ::emberRequestDhcpAddress
 */
void emberRequestDhcpAddressReturn(EmberStatus status,
                                   const uint8_t *prefix,
                                   uint8_t prefixLengthInBits);

/** @brief
 * Provides the result of a call to ::emberRequestSlaacAddress
 *
 * This call only indicates the status of the request (EMBER_ERR_FATAL if no
 * SLAAC server is found, and EMBER_SUCCESS otherwise).  The assigned IPv6
 * address is returned via ::emberAddressConfigurationChangeHandler
 *
 * @param status                  Status of SLAAC Address Request
 * @param prefix                  Prefix requested in ::emberRequestSlaacAddress
 * @param prefixLengthInBits      Prefix length in bits requested in
 *                                ::emberRequestSlaacAddress
 */
void emberRequestSlaacAddressReturn(EmberStatus status,
                                    const uint8_t *prefix,
                                    uint8_t prefixLengthInBits);

/** @brief  Notifies the application of a reset on the Ember chip
 * due to the indicated cause.
 */
void emberResetMicroHandler(EmberResetCause cause);

/** @brief Provides the result of a call to emberResetNetworkState(). */
void emberResetNetworkStateReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to emberResignGlobalAddress().
 */
void emberResignGlobalAddressReturn(EmberStatus status);

/** @brief A callback that indicates whether a prior call to
 * ::emberResumeNetwork() successfully initiated the resume process.
 * The status argument is either EMBER_SUCCESS, or
 * EMBER_INVALID_CALL if resume was called when the network status was
 * not EMBER_SAVED_NETWORK, or while a scan was underway.
 */
void emberResumeNetworkReturn(EmberStatus status);

/** @brief  Provides the status upon completion of a scan. */
void emberScanReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSendSteeringData(). */
void emberSendSteeringDataReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberSetAntennaMode.
 *
 * @param EMBER_SUCCESS if antenna mode is configured as desired
 * or EMBER_BAD_ARGUMENT if antenna mode is not supported.
 */
void emberSetAntennaModeReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSetCcaThreshold(). */
void emberSetCcaThresholdReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberSetCtune.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 */
void emberSetCtuneReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberSetMfgToken.
 *
 * @param tokenId         Which manufacturing token set.
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 */
void emberSetMfgTokenReturn(EmberMfgTokenId tokenId,
                            EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberSetPtaEnable.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 */
void emberSetPtaEnableReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberSetPtaOptions.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure.
 */
void emberSetPtaOptionsReturn(EmberStatus status);

/** @brief
 * Provides the result of a call to ::emberSetRadioHoldOff.
 *
 * @param status An EmberStatus value indicating success or the
 *               reason for failure. EMBER_SUCCESS if Radio HoldOff
 *               was configured as desired or EMBER_BAD_ARGUMENT
 *               if requesting it be enabled but RHO has not been
 *               configured by the BOARD_HEADER.
 */
void emberSetRadioHoldOffReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSetRadioPower() on the host. */
void emberSetRadioPowerReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSetSecurityParameters(). */
void emberSetSecurityParametersReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSetTxPowerMode() on the host. */
void emberSetTxPowerModeReturn(EmberStatus status);

/** @brief
 * This is called when the stack knows about a new SLAAC prefix or if
 * a SLAAC server has become unavailable.
 *
 * "available" means we can configure a SLAAC address.
 *
 * @param prefix                  SLAAC prefix
 * @param prefixLengthInBits      length in bits of the prefix
 * @param available               whether we can configure an address
 */
void emberSlaacServerChangeHandler(const uint8_t *prefix,
                                   uint8_t prefixLengthInBits,
                                   bool available);

/** @brief Provides the result of a call to emberStackPollForData(). */
void emberStackPollForDataReturn(EmberStatus status);

/** @brief Callback to tell the host to start security commissioning
 *
 * @param address parent IP address, 16 bytes
 */
void emberStartHostJoinClientHandler(const uint8_t *parentAddress);

/**
 * @brief In a host/NCP setup, provides the result of a call to emberState() on the host.
 *
 * @param parameters Current network parameters
 * @param localEui64 The EUI64 of the Ember chip
 * @param macExtendedId The extended MAC ID of the Ember chip
 * @param networkStatus The current status of the network
 */
void emberStateReturn(const EmberNetworkParameters *parameters,
                      const EmberEui64 *localEui64,
                      const EmberEui64 *macExtendedId,
                      EmberNetworkStatus networkStatus);

/** @brief
 * This can be stubbed out on the SoC and host app.  It is used by the
 * NCP to update security on the driver when it is instructed to switch
 * the network key by an over the air update.
 *
 */
void emberSwitchToNextNetworkKeyHandler(EmberStatus status);

/** @brief Provides the result of a call to emberSwitchToNextNetworkKey(). */
void emberSwitchToNextNetworkKeyReturn(EmberStatus status);

/** @brief Provides the result of a call to emberSetDtlsDeviceCertificate().
 *
 * @param result
 * - ::0      The certificate was set successfully.
 * - ::result error code
 *            - an EmberStatus value if using Silicon Labs TLS
 *            - an mbed TLS error code if using mbed TLS library
 *            (see mbedtls:include/mbedtls/ssl.h)
 */
void emberSetDtlsDeviceCertificateReturn(uint32_t result);

/** @brief Provides the result of a call to emberSetDtlsPresharedKey().
 *
 * @param result
 * - ::status An EmberStatus value
 */
void emberSetDtlsPresharedKeyReturn(EmberStatus status);

/** @brief Provides the result of a call to emberOpenDtlsConnection().
 *
 * @param result error code
 *        - an EmberStatus value if using Silicon Labs TLS
 *        - an mbed TLS error code if using mbed TLS library
 *        (see mbedtls:include/mbedtls/ssl.h)
 * @param remoteAddress IPv6 address of the server
 * @param localPort     local port
 * @param remotePort    remote port
 */
void emberOpenDtlsConnectionReturn(uint32_t result,
                                   const EmberIpv6Address *remoteAddress,
                                   uint16_t localPort,
                                   uint16_t remotePort);

/** @brief Indicates to the application that a secure connection was
 *         successfully established.
 *
 * @param flags         1 = server, 0 = client (possibly other info later)
 * @param sessionId     sessionId used for secure CoAP transport
 * @param localAddress  local IPv6 address
 * @param remoteAddress remote IPv6 address
 * @param localPort     local port
 * @param remotePort    remote port
 */
void emberDtlsSecureSessionEstablished(uint8_t flags,
                                       uint8_t sessionId,
                                       const EmberIpv6Address *localAddress,
                                       const EmberIpv6Address *remoteAddress,
                                       uint16_t localPort,
                                       uint16_t remotePort);

/** @brief Provides the result of a call to emberGetSecureDtlsSessionId().
 *
 * @param sessionId     sessionId used for secure CoAP transport
 * @param remoteAddress remote IPv6 address
 * @param localPort     local port
 * @param remotePort    remote port
 */
void emberGetSecureDtlsSessionIdReturn(uint8_t sessionId,
                                       const EmberIpv6Address *remoteAddress,
                                       uint16_t localPort,
                                       uint16_t remotePort);

/** @brief Provides the result of a call to emberCloseDtlsConnection(), or
 *         indicates that the connection was closed on the other end.
 *
 * @param sessionId     sessionId used for secure CoAP transport.
 * @param status
 * - ::EMBER_SUCCESS      - Successfully closed the connection
 * - ::EMBER_INVALID_CALL - Invalid session ID
 * - ::EMBER_ERR_FATAL    - Fatal error closing the connection
 */
void emberCloseDtlsConnectionReturn(uint8_t sessionId, EmberStatus status);

/** @brief Process a CoAP message received over an alternate transport.
 *
 * Called to process a CoAP message that arrived via DTLS or other
 * alternative transport.  Only the address, port and transmit handler
 * fields of `info` are used.  The token and ackData fields are
 * ignored.
 */
void emberProcessCoap(const uint8_t *message,
                      uint16_t messageLength,
                      EmberCoapRequestInfo *info);

/** @brief
 * Callback informing the application running on the micro of interruptions 
 * to normal processing. If ::busy is true, the micro will be busy processing
 * and unavailable for an indefinite period of time. If ::busy is false, the
 * micro has resumed normal operation.  The main use case is jpake crypto
 * on EM3xx processors. This gives the application a chance to prepare for
 * the pause in regular processing.
 *
 * This callback is not available on a host processor.
 * Note that if ::busy is true, the micro may become busy as soon as this
 * handler exits. In a host/ncp setup, one solution for informing the
 * host is to implement this handler in your own xNCP image and use it to
 * toggle the serial CTS line.
 */
void emberMicroBusyHandler(bool busy);

/** @brief The radio calibration callback function.
 *
 * The Voltage Controlled Oscillator (VCO) can drift with
 * temperature changes.  During every call to ::emberTick(), the stack will
 * check to see if the VCO has drifted.  If the VCO has drifted, the stack
 * will call ::emberRadioNeedsCalibratingHandler() to inform the application
 * that it should perform calibration of the current channel as soon as
 * possible.  Calibration can take up to 150ms.  The default callback function
 * implementation provided here performs calibration immediately.  If the
 * application wishes, it can define its own callback by defining
 * ::EMBER_APPLICATION_HAS_CUSTOM_RADIO_CALIBRATION_CALLBACK in its
 * CONFIGURATION_HEADER.  It can then failsafe any critical processes or
 * peripherals before calling ::emberCalibrateCurrentChannel().  The
 * application must call ::emberCalibrateCurrentChannel() in
 * response to this callback to maintain expected radio performance.
 */
void emberRadioNeedsCalibratingHandler(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberAddAddressData
 */
void emberAddAddressDataReturn(uint16_t shortId);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberAssertInfo
 */
void emberAssertInfoReturn(const uint8_t *fileName, uint32_t lineNumber);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberClearAddressCache
 */
void emberClearAddressCacheReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberConfigUart
 */
void emberConfigUartReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberEcho
 */
void emberEchoReturn(const uint8_t *data, uint8_t length);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberGetMulticastEntry
 */
void emberGetMulticastEntryReturn(uint8_t lastSequence,
                                  uint8_t windowBitmask,
                                  uint8_t dwellQs,
                                  const uint8_t *seed);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberGetNetworkKeyInfo
 */
void emberGetNetworkKeyInfoReturn(EmberStatus status,
                                  uint32_t sequence,
                                  uint8_t state);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberGetNodeStatus
 */
void emberGetNodeStatusReturn(EmberStatus status,
                              uint8_t ripId,
                              EmberNodeId nodeId,
                              uint8_t parentRipId,
                              EmberNodeId parentId,
                              const uint8_t *networkFragmentIdentifier,
                              uint32_t networkFrameCounter);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberLookupAddressData
 */
void emberLookupAddressDataReturn(uint16_t shortId);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberNcpUdpStormComplete
 */
void emberNcpUdpStormCompleteHandler(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberNcpUdpStorm
 */
void emberNcpUdpStormReturn(EmberStatus status);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberResetNcpAsh
 */
void emberResetNcpAshReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberSendDone
 */
void emberSendDoneReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberSetRandomizeMacExtendedId
 */
void emberSetRandomizeMacExtendedIdReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberSetWakeupSequenceNumber
 */
void emberSetWakeupSequenceNumberReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberStartUartStorm
 */
void emberStartUartStormReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberStopUartStorm
 */
void emberStopUartStormReturn(void);

/** @brief Callback for a debug command.  Provides the result of
 * ::emberUartSpeedTest
 */
void emberUartSpeedTestReturn(uint32_t totalBytesSent,
                              uint32_t payloadBytesSent,
                              uint32_t timeout);

/** @brief  Application callback for an incoming UDP message.
 *
 * @param destination     IPV6 destination address
 * @param source          IPV6 source address
 * @param localPort       UDP source port
 * @param remotePort      UDP destination port
 * @param payload         UDP transport payload
 * @param payloadLength   payload length
 */
void emberUdpHandler(const uint8_t *destination,
                     const uint8_t *source,
                     uint16_t localPort,
                     uint16_t remotePort,
                     const uint8_t *payload,
                     uint16_t payloadLength);

/** @brief  Application callback for an incoming UDP multicast.
 *
 * @param destination     IPV6 destination address
 * @param source          IPV6 source address
 * @param localPort       UDP source port
 * @param remotePort      UDP destination port
 * @param payload         UDP transport payload
 * @param payloadLength   payload length
 */
void emberUdpMulticastHandler(const uint8_t *destination,
                              const uint8_t *source,
                              uint16_t localPort,
                              uint16_t remotePort,
                              const uint8_t *payload,
                              uint16_t payloadLength);

/**************************************************************************//**
 * Get the public key used in the application.
 *
 * @param publicKey The returned pointer to the public key data
 * @param publicKeySize The returned size of the public key data
 *
 * The public key data is used to generate this device's UID.
 *
 * @note Both the publicKey and publicKeySize parameters are meant to be
 *       assigned by the implementation of this call. The expectation is that
 *       the public key is a global value, so that the pointer provided by the
 *       implementation of this callback will point to constant public key data.
 *****************************************************************************/
void emberZclGetPublicKeyCallback(const uint8_t **publicKey,
                                  uint16_t *publicKeySize);

/**************************************************************************//**
 * An attribute is about to change value.
 *
 * @param endpointId The endpoint to which the new attribute value applies
 * @param clusterSpec The cluster to which the new attribute value applies
 * @param attributeId The attribute ID
 * @param buffer The data representing the new attribute value
 * @param bufferLength The length of the new attribute value data
 * @return `true` if the attribute should take this new value, `false`
 *         otherwise.
 *
 * This callback gives the application an opportunity to prevent an attribute
 * from changing value by returning `false`.
 *
 * @sa emberZclPostAttributeChangeCallback
 *****************************************************************************/
bool emberZclPreAttributeChangeCallback(EmberZclEndpointId_t endpointId,
                                        const EmberZclClusterSpec_t *clusterSpec,
                                        EmberZclAttributeId_t attributeId,
                                        const void *buffer,
                                        size_t bufferLength);

/**************************************************************************//**
 * An attribute has changed value.
 *
 * @param endpointId The endpoint to which the new attribute value applies
 * @param clusterSpec The cluster to which the new attribute value applies
 * @param attributeId The attribute ID
 * @param buffer The data representing the new attribute value
 * @param bufferLength The length of the new attribute value data
 *
 * This callback gives the application an opportunity to react to an attribute
 * changing value.
 *
 * @sa emberZclPreAttributeChangeCallback
 *****************************************************************************/
void emberZclPostAttributeChangeCallback(EmberZclEndpointId_t endpointId,
                                         const EmberZclClusterSpec_t *clusterSpec,
                                         EmberZclAttributeId_t attributeId,
                                         const void *buffer,
                                         size_t bufferLength);

/**************************************************************************//**
 * An external attribute value needs to be read.
 *
 * @param endpointId The endpoint to which the attribute value applies
 * @param clusterSpec The cluster to which the attribute value applies
 * @param attributeId The attribute ID
 * @param buffer The data buffer into which the attribute value will be read
 * @param bufferLength The length of the data buffer
 * @return An ::EmberZclStatus_t value representing the success or failure of
 *         the read operation.
 *
 * This callback alerts the application that an externally stored attribute
 * needs to be read. The application is expected to read the attribute value
 * from its external storage, populate the buffer parameter with the attribute
 * value, and return an ::EmberZclStatus_t value representing the success or
 * failure of the read operation.
 *
 * @sa emberZclWriteExternalAttributeCallback
 *****************************************************************************/
EmberZclStatus_t emberZclReadExternalAttributeCallback(EmberZclEndpointId_t endpointId,
                                                       const EmberZclClusterSpec_t *clusterSpec,
                                                       EmberZclAttributeId_t attributeId,
                                                       void *buffer,
                                                       size_t bufferLength);

/**************************************************************************//**
 * An external attribute value needs to be written.
 *
 * @param endpointId The endpoint to which the attribute value applies
 * @param clusterSpec The cluster to which the attribute value applies
 * @param attributeId The attribute ID
 * @param buffer The data buffer holding the attribute value to be written
 * @param bufferLength The length of the data buffer
 * @return An ::EmberZclStatus_t value representing the success or failure of
 *         the write operation.
 *
 * This callback alerts the application that an externally stored attribute
 * needs to be written. The application is expected to write the attribute value
 * to its external storage and return an ::EmberZclStatus_t value representing
 * the success or failure of the write operation.
 *
 * @sa emberZclReadExternalAttributeCallback
 *****************************************************************************/
EmberZclStatus_t emberZclWriteExternalAttributeCallback(EmberZclEndpointId_t endpointId,
                                                        const EmberZclClusterSpec_t *clusterSpec,
                                                        EmberZclAttributeId_t attributeId,
                                                        const void *buffer,
                                                        size_t bufferLength);

/**************************************************************************//**
 * Get the default reporting configuration for a cluster on an endpoint.
 *
 * @param endpointId The endpoint to which the reporting configuration applies
 * @param clusterSpec The cluster to which the reporting configuration applies
 * @param configuration The reporting configuration structure to populate with
 *                      the default reporting configuration
 *
 * This callback gives the application an opportunity to define the default
 * reporting configuration for each cluster on each endpoint. The configuration
 * parameter will be passed with default values and the application is expected
 * to update this parameter with its desired reporting configuration. This
 * callback is called when a reporting configuration is reset to its defaults.
 *
 * @sa emberZclGetDefaultReportableChangeCallback
 *****************************************************************************/
void emberZclGetDefaultReportingConfigurationCallback(EmberZclEndpointId_t endpointId,
                                                      const EmberZclClusterSpec_t *clusterSpec,
                                                      EmberZclReportingConfiguration_t *configuration);

/**************************************************************************//**
 * Get the default reportable change for an attribute.
 *
 * @param endpointId The endpoint to which the reportable change applies
 * @param clusterSpec The cluster to which the reportable change applies
 * @param attributeId The attribute ID
 * @param buffer The data buffer to populate with the reportable change value
 * @param bufferLength The length of the data buffer
 *
 * This callback gives the application an opportunity to define the reportable
 * change value for each attribute that is being reported. This callback is
 * called when a reporting configuration is reset to its defaults.
 *
 * @sa emberZclGetDefaultReportingConfigurationCallback
 *****************************************************************************/
void emberZclGetDefaultReportableChangeCallback(EmberZclEndpointId_t endpointId,
                                                const EmberZclClusterSpec_t *clusterSpec,
                                                EmberZclAttributeId_t attributeId,
                                                void *buffer,
                                                size_t bufferLength);

/**************************************************************************//**
 * A notification has been received.
 *
 * @param context Information about the notification
 * @param clusterSpec The cluster to which the attribute applies
 * @param attributeId The attribute ID to which the notification applies
 * @param buffer The data buffer containing the reported attribute value
 * @param bufferLength The length of the data buffer
 *****************************************************************************/
void emberZclNotificationCallback(const EmberZclNotificationContext_t *context,
                                  const EmberZclClusterSpec_t *clusterSpec,
                                  EmberZclAttributeId_t attributeId,
                                  const void *buffer,
                                  size_t bufferLength);

/*
 * Callback for handling a ZCL message.
 *   cluster: Basic
 *   command: ResetToFactoryDefaults
 *      side: server
 */
void emberZclClusterBasicServerCommandResetToFactoryDefaultsRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterBasicServerCommandResetToFactoryDefaultsRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: Identify
 *   command: Identify
 *      side: server
 */
void emberZclClusterIdentifyServerCommandIdentifyRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandIdentifyRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: Identify
 *   command: IdentifyQuery
 *      side: server
 */
void emberZclClusterIdentifyServerCommandIdentifyQueryRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandIdentifyQueryRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: Identify
 *   command: EZModeInvoke
 *      side: server
 */
void emberZclClusterIdentifyServerCommandEZModeInvokeRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandEZModeInvokeRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: Identify
 *   command: UpdateCommissionState
 *      side: server
 */
void emberZclClusterIdentifyServerCommandUpdateCommissionStateRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandUpdateCommissionStateRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: Identify
 *   command: TriggerEffect
 *      side: server
 */
void emberZclClusterIdentifyServerCommandTriggerEffectRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandTriggerEffectRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: On/off
 *   command: Off
 *      side: server
 */
void emberZclClusterOnOffServerCommandOffRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOffRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: On/off
 *   command: On
 *      side: server
 */
void emberZclClusterOnOffServerCommandOnRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOnRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: On/off
 *   command: Toggle
 *      side: server
 */
void emberZclClusterOnOffServerCommandToggleRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandToggleRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: On/off
 *   command: OffWithEffect
 *      side: server
 */
void emberZclClusterOnOffServerCommandOffWithEffectRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOffWithEffectRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: On/off
 *   command: OnWithRecallGlobalScene
 *      side: server
 */
void emberZclClusterOnOffServerCommandOnWithRecallGlobalSceneRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOnWithRecallGlobalSceneRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: On/off
 *   command: OnWithTimedOff
 *      side: server
 */
void emberZclClusterOnOffServerCommandOnWithTimedOffRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOnWithTimedOffRequest_t *request);

/*
 * Callback for handling a ZCL message.
 *   cluster: Over the Air Bootloading
 *   command: ImageNotify
 *      side: client
 */
void emberZclClusterOtaBootloadClientCommandImageNotifyRequestHandler(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadClientCommandImageNotifyRequest_t *request);

#endif // SILABS_THREAD_CALLBACKS
